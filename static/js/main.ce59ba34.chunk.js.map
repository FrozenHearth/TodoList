{"version":3,"sources":["components/TodoItem.js","components/TodoInput.js","components/TodoList.js","App.js","index.js"],"names":["TodoItem","props","todo","complete","text","className","onClick","toggleCompleted","deleteTodo","TodoInput","handleChange","e","target","name","value","setState","handleSubmit","event","preventDefault","state","trim","length","onSubmit","completed","id","shortid","generate","this","autoComplete","onChange","type","placeholder","Component","TodoList","todos","todosToShow","activeTodo","addTodo","newTodos","completedTodos","map","updateTodoToShow","filter","localStorage","getItem","JSON","parse","_","nextState","setItem","stringify","remainingItems","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce59ba34.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/TodoItem.css';\n\nexport const TodoItem = props => {\n  const { complete, text } = props.todo;\n  return (\n    <div className=\"todo-item\">\n      <p\n        onClick={props.toggleCompleted}\n        className={complete ? 'todo-complete-text todo-text' : 'todo-text'}\n      >\n        {text}\n      </p>\n      <button onClick={props.deleteTodo} className=\"delete-btn\">\n        X\n      </button>\n    </div>\n  );\n};\n\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport '../styles/TodoInput.css';\n\nexport default class TodoInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: ''\n    };\n  }\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value\n    });\n  };\n  handleSubmit = event => {\n    event.preventDefault();\n    const { text } = this.state;\n    const trimmedText = text.trim();\n    if (trimmedText.length > 0) {\n      this.props.onSubmit({\n        text,\n        completed: false,\n        id: shortid.generate()\n      });\n      this.setState({\n        text: ''\n      });\n    }\n  };\n  render() {\n    const { text } = this.state;\n    return (\n      <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n        <input\n          className=\"todo-input\"\n          value={text}\n          onChange={this.handleChange}\n          name=\"text\"\n          type=\"text\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { TodoItem } from './TodoItem';\nimport TodoInput from './TodoInput';\nimport '../styles/TodoList.css';\n\nexport default class TodoList extends Component {\n  state = {\n    todos: [],\n    todosToShow: 'all',\n    activeTodo: 'allButton'\n  };\n\n  componentWillMount() {\n    localStorage.getItem('todos') &&\n      this.setState({\n        todos: JSON.parse(localStorage.getItem('todos'))\n      });\n  }\n\n  componentWillUpdate(_, nextState) {\n    localStorage.setItem('todos', JSON.stringify(nextState.todos));\n  }\n\n  addTodo = todo => {\n    const newTodos = [...this.state.todos, todo];\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  toggleCompleted = id => {\n    const completedTodos = this.state.todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            complete: !todo.complete\n          };\n        } else {\n          return todo;\n        }\n      })\n    this.setState({\n      todos: completedTodos\n    });\n  };\n\n  updateTodoToShow = (todo, activeTodo) => {\n    this.setState({\n      todosToShow: todo,\n      activeTodo: activeTodo\n    });\n  };\n\n  deleteTodo = id => {\n    this.setState({\n      todos: this.state.todos.filter(todo => todo.id !== id)\n    });\n  };\n  render() {\n    let todos = [];\n    const { todosToShow, activeTodo } = this.state;\n    const remainingItems = this.state.todos.filter(todo => !todo.complete)\n      .length;\n    if (todosToShow === 'all' && activeTodo === 'allButton') {\n      todos = this.state.todos;\n    } else if (todosToShow === 'active' && activeTodo === 'activeButton') {\n      todos = this.state.todos.filter(todo => !todo.complete);\n    } else if (todosToShow === 'complete' && activeTodo === 'completeButton') {\n      todos = this.state.todos.filter(todo => todo.complete);\n    }\n    return (\n      <>\n        <h1 className=\"header-text\">todos</h1>\n        <TodoInput onSubmit={this.addTodo} />\n        {this.state.todos.length > 0 && (\n          <div className=\"todo-list\">\n            {todos.map(todo => (\n              <TodoItem\n                key={todo.id}\n                toggleCompleted={() => this.toggleCompleted(todo.id)}\n                deleteTodo={() => this.deleteTodo(todo.id)}\n                todo={todo}\n              />\n            ))}\n            <footer className=\"footer-container\">\n              <p className=\"todos-count\">{remainingItems} items left</p>\n              <div className=\"filters\">\n                <button\n                  className={\n                    activeTodo === 'allButton'\n                      ? 'all-btn active-btn-border'\n                      : 'all-btn'\n                  }\n                  onClick={() => this.updateTodoToShow('all', 'allButton')}\n                >\n                  All\n                </button>\n                <button\n                  className={\n                    activeTodo === 'activeButton'\n                      ? 'active-todo-btn active-btn-border'\n                      : 'active-todo-btn'\n                  }\n                  onClick={() =>\n                    this.updateTodoToShow('active', 'activeButton')\n                  }\n                >\n                  Active\n                </button>\n                <button\n                  className={\n                    activeTodo === 'completeButton'\n                      ? 'complete-btn active-btn-border'\n                      : 'complete-btn'\n                  }\n                  onClick={() =>\n                    this.updateTodoToShow('complete', 'completeButton')\n                  }\n                >\n                  Completed\n                </button>\n              </div>\n            </footer>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport TodoList from './components/TodoList';\n\nexport const App = () => {\n  return (\n    <>\n      <TodoList />\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './styles/styles.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}